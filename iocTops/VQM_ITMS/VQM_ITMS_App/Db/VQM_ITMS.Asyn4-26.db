#####################################################################################################
#																									#
#	Module:																							#
#		VQM_ITMS.db																				#
#																									#
#	Description:																					#
#		Defines the IOC records that are used by the VQM_ITMSApp.								#
#																									#
#	Author:  Peter Heesterman (Tessella plc). Date: 05 Jan 2015.									#
#	Written for CCFE (Culham Centre for Fusion Energy).												#
#																									#
#	VQM_ITMS is distributed subject to a Software License Agreement								#
#	found in file LICENSE that is included with this distribution.									#
#																									#
#####################################################################################################

record(ao, "$(P)Emission")
{
    field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)EMISSION")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)FilamentBias")
{
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)FILAMENTBIAS")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)RepellerBias")
{
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)REPELLERBIAS")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)EntryPlate")
{
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)ENTRYPLATE")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)PressurePlate")
{
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)PRESSUREPLATE")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)Cups")
{
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)CUPS")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)Transition")
{
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)TRANSITION")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)ExitPlate")
{
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)EXITPLATE")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)EMShield")
{
    field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)EMSHIELD")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)EMBias")
{
    field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)EMBIAS")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)RFAmp")
{
    field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)RFAMP")
#	info("asyn:READBACK", "1")
}

record(ao, "$(P)MassCal")
{
    field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)MASSCAL")
#	info("asyn:READBACK", "1")
}

record(ai, "$(P)ElectrometerGain")
{
    field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),$(ADDR),1)ELECTROMETERGAIN")
}

record(ao, "$(P)MassFrom")
{
    field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)MASSFROM")
}

record(ao, "$(P)MassTo")
{
    field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)MASSTO")
}

record(waveform, "$(P)RawData")
{
    field(DTYP, "asynFloat32ArrayIn")
    field(FTVL, "FLOAT")
	field(INP,  "@asyn($(PORT),$(ADDR),1)RAWDATA")
#	field(SCAN, "1 second")
}

record(longin, "$(P)Fault")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),1)FAULT")
	field(SCAN, "I/O Intr")
}
