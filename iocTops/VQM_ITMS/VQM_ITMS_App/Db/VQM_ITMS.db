#####################################################################################################
#																									#
#	Module:																							#
#		VQM_ITMS.db																				#
#																									#
#	Description:																					#
#		Defines the IOC records that are used by the VQM_ITMSApp.								#
#																									#
#	Author:  Peter Heesterman (Tessella plc). Date: 05 Jan 2015.									#
#	Written for CCFE (Culham Centre for Fusion Energy).												#
#																									#
#	VQM_ITMS is distributed subject to a Software License Agreement								#
#	found in file LICENSE that is included with this distribution.									#
#																									#
#####################################################################################################

#####################################################################################################
#																									#
#	Field(s)																						#
#		Reset:					Set to true for a pump reset (rising edge). Returns to the false.	#
#		FirmwareVersion:		The pumps firmware version string is read out (start-up only).		#
#		WarningTemperature:		The pump has a high temperature warning (numeric code).				#
#		WarningTemperatureStr:	A textual representation of the above warning.						#
#		WarningHighLoad:		The pump has a high load warning (numeric code).					#
#		WarningHighLoadStr:		A textual representation of the above warning.						#
#		WarningPurge:			The pump has purge warning (numeric code).							#
#		WarningPurgeStr:		A textual representation of the above warning.						#
#		StatorFrequency:		The pump's stator frequency value.									#
#		ConverterTemperature:	The pump's converter temperature value.								#
#		MotorCurrent:			The pump's motor current value.										#
#		PumpTemperature:		The pump's temperaure value.										#
#		CircuitVoltage:			The pump's circuit voltage value.									#
#																									#
#####################################################################################################

record(mbbo, "$(P)Filament")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)FILAMENT")
	info("asyn:READBACK", "1")
	field(ZRVL, "0")
	field(ONVL, "1")
	field(TWVL, "2")
    field(ZRST, "OFF")
    field(ONST, "ONE")
    field(TWST, "TWO")
	field(VAL, 1)
}

record(ao, "$(P)Emission")
{
    field(DTYP, "asynFloat64")
	field(PREC, "3")
	field(EGU, "mA")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)EMISSION")
	info("asyn:READBACK", "1")
}

record(waveform, "$(P)Massrange")
{
    field(DTYP, "asynFloat64")
	field(PREC, "3")
	field(EGU, "AMU")
	field(NELM, 2)
	field(OUT,  "@asyn($(PORT),$(ADDR),1)MASSRANGE")
	info("asyn:READBACK", "1")
}

record(waveform, "$(P)Rawdata")
{
	field(FTVL, "FLOAT")
	field(INP,  "@asyn($(PORT),$(ADDR),1)RAWDATA")
}

record(ao, "$(P)Multipliervolts")
{
    field(DTYP, "asynFloat64")
	field(PREC, "3")
	field(EGU, "AMU")
	field(OUT,  "@asyn($(PORT),$(ADDR),1)MULTIPLIERVOLTS")
	info("asyn:READBACK", "1")
}

record(ai, "$(P)Multipliergain")
{
    field(DTYP, "asynFloat64")
	field(PREC, "3")
	field(INP,  "@asyn($(PORT),$(ADDR),1)MULTIPLIERGAIN")
}

record(stringin, "$(P)Serialnumber")
{
	field(DTYP, "asynOctetRead")
	field(INP,  "@asyn($(PORT),$(ADDR),1)Serialnumber")
}
