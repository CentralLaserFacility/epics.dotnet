By Heinrich du Toit:

Modified the dmbCreateUser:
	Can now do multiple config options:
		non-currently 

The acqType parameter of DAQmxBaseConfig is now string (e.g. "AI") 
	No longer need to guess what's going on

Add a last "options" parameter to DAQmxBaseConfig can be used to define some options
	Terminal options: TerminalDef, TerminalRSE, TerminalNRSE, TerminalDiff
	Polling options: Polled, NotPolled
		Removed again - now only works with trigMode = onehost/continuous
	min volts: m=*  (where * is a real number in volts e.g. m=-5)
	max volts: M=*
	MONSTER mode: In this mode the thing just keeps on reading. You need a fast computer or need 
to set frequency fairly slow else you will run into errors
	triggermode: Oneshot,Continuous (same as using a TRIGGERMODE interface)
	frequency: F=*
	Nsamples: N=*
	

(The idea is that all options can be set using either direct config options or a record interface)

We can now setup multiple channels on a single port
	Note that it is best to only use Polled mode on one channel
	Set all records to I/O Intr accept for 1 channels 


Added a data read for dmbRead - this will read the first read value
	Interrupts not supported (still todo!) 
	Will work in polled mode (SCAN = x second(s))

	

Changed the whole setup option thing
	Multiple channels must be setup with multiple calls to DAQmxBaseConfig
	nChannels is now Channelnr. (Must be in order from 0)
	
	Removed some stuff in allocBuffers - not needed I think 
		(Unless we want to do that "change" size thing later on?)


Fixed all warning (well for now anyways)

Fixed the pPvt->devicenames creation thing 
float64ArrayRead now checks that command == dataCmd 
Removed clockId -> now using CLOCK_REALTIME

Changed MAX_CHANNELS to 64 (should be more than enough me thinks)


Found the buffer overflow error problem:
	This happens if we don't read as fast as the card is producing.
	Solution 1: In polled mode the task is stopped and started so as not to read continually.
	Solution 2: Get a bloody fast computer and set frequency low enough so that things can keep 
up.  Added option MONSTER for this :)
	Solution 3: Use triggered mode - as to only sample on a certain trigger.. once. Hope trigger 
doesn't come to often
	Solution 4: We do not run in continues mode. We simply restart the task everytime 
	before we read (acquire state). This is probably slower but it doesn't run into problems. 
	This is the default mode.



Fixed numurous places where getAddr used the debug user rather than the user from the recordsupport 
and therefore never got the correct signal numbers


Added a shutdown function to properly stop things when IOC shutsdown.
	DAQepicsExitFunc - one installed for every port 

Fixed Float64Array interrupts - typo


allocBuffers now called before configure
	This is more like a late alloc process
	Only realloc if larger buffers needed 
	Now nSamples can be changed dynamically during operation

Added a DAQmxReset(device) IOC command
	Currently this seem to create a SEGFAULT inside the NI library :(
	Will force all ports to reconfigure unless in unconfigured state

Added TERMINAL record interface
	values 0-3 = default,RSE,NRSE,Diff

If sampleRate <= 0 then the CfgSampClkTiming will not be called
	This is what you want if you want direct updating outputs 


Added AO stuff
	Singleshot stuff works I think
	You can use a single Float64 to write 1 value (remember to set nSamples = 1)
	And you can use float64ArrayWrite to write multiple values (untested)


Added the DAQmxChangeDeviceName(port,signal,newdevice) function
	This can be used at runtime to change the device name of a specific signal inside a port
	So a tedious restart of IOC is no longer required to change this parameter
	
Added the DAQmxPortOptions(port,signal,options) function
	This way you can specify options to signals/ports at runtime without PVs
	It can also be used during initializaiton
	Will reconfigure unless unconfigured
	This does not undo older options. Only adds more. So you can have sperate calls after each other.

Added the DAQmxGen(port,signal,params) function
	It will generate an output waveform
	Currently incomplete by far :(

changed DEFAULT_WAIT_DELAY to 0.3 
	should maybe go down to 0.1?

fixed numurous other things :}

Added BI and BO
	You can do BI and BO read/write with Int32Array interface
	Also fixed up the dmbRead and dmbWrite DATA interface to work 
	with BI,BO,AI and AO

Split acquire state into acquireAnlg and acquireDig states
	Writing dig/anlg is both handled in write state.
	The states thing seem to create some problems as there is alot 
of places in code where things check the states. Maybe this is not such 
a good idea
	
Added options:
	TriggerAnlg and TriggerDig

Added IOC command DAQmxTrigger(portname,trigersource,options)
	options is the same as DAQmxBaseConfig's options

options now uses epicsStrCaseCmp function

Started testing Sequence output stuff
	Changed the way Output tasks are started.


Added a lot of Generator functionality :)
	This thing can now effectively be used as a signal generator
	And it can generate some complex signals if DAQmxGen function 
	is used in combinations!
	Maybe this can be handy if you don't have hardware ready but 
	like todo some testing with "fake" waveforms.
	Should make it possible that these waveforms be read also into 
	records... (todo)


You can now read on output ports also.
	This simply reads in what is currently being written
	Not sure if this behaviour should be configurable?

21 Aug:

Added DAQmxStart IOC command

Added softTrigger functionality
	This is a simple method to help a signal stand "still" on the display!
	Not very fancy - only for AI
	SoftTriggerMode not controllable by PV's :(



22 Aug:

Testing various thing

Testing binary in/out
	Made some bug-fixes

Added option C=ClockSource - needed if we want exteneral clocksource
	default is OnBoardClock

Added CO mode (Counter output)
	If monstermode or nsamples = 0 then continous
	else must start everytime with a write instruction - PROBLEM HERE
	added options: IdleLow and IdleHigh
	also: D=DutyCycle and d=delay
	Set F=0 to disable implicit timing for single pulse generation
	(testing/documentation not done today)

Fixed up the code in DAQmxChangeDeviceName


23 Aug

CO Pulse/continuous now working
	Still need some work - further testing maybe


Added COUNTER mode.
	3 input modes CIPeriod, CICountEdges and CIPulseWidth
	4 read modes F64/U32 (both scalar or non-scaler) - scaler = 1 value only
	I'm trying to test this as far as possible
	
	Needed to make MANY expansions and changes to the code to 
include the COUNTER mode - as it is quite complex

TODO:
	COUNTER mode incomplete and fairly untested!!	
	

Need to test BO mode with internal CO as clock source.
	Then also to test BO in non-continous mode with this.

I need a way to trigger out-writes of BO/AO/CO ect without having to 
over-write data- so DATA write is not good enough
	
	It might make sense todo interrupt calls out of a seperate thread?
	This way one thread can continue to service the NI card while another 
is busy passing data to the Records.
	-Will make things even more difficult :(
	-But it will be easier to make MONSTER mode work.
	-We can then begin to look into other soft Trigger options while in 
continous mode. -> that will not cut-off sampled data when triggering.


This driver is getting pretty BIG and COMPLEX.
There is just so many different possible setup combinations that it is 
near impossible to test all of them :(	


