#
# Records for Agilent TwisTorr 2300 Pump Controller
#
# Macro Definitions:
# 
# P        - prefix
# PROTO    - name of protocol file
# PORT     - asyn port name
# EVFAST   - EPICS event number for fast updates
# EVSLOW   - EPICS event number for slow updates
# EVSINGLE - EPICS event number for single-shot updates

record(bi, "$(P):Start:rbk") {
   field(DESC, "Start/Stop")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getStart $(PORT)")
   field(ZNAM, "Stopped")
   field(ONAM, "Running")
   field(PINI, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(bo, "$(P):Start") {
   field(DESC, "Start/Stop")
   field(ASG, "vtp")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setStart $(PORT)")
   field(ZNAM, "Stopped")
   field(ONAM, "Running")
   field(FLNK, "$(P):Start:upd")
}

record(seq, "$(P):Start:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Start:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Start:rbk.PROC")
}

record(bi, "$(P):LowSpeed:rbk") {
   field(DESC, "Run at Low Speed")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getLowSpeed $(PORT)")
   field(ZNAM, "High Speed")
   field(ONAM, "Low Speed")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

#record(bo, "$(P):LowSpeed") {
#   field(DESC, "Run at Low Speed")
#   field(ASG, "vtp")
#  field(DTYP, "stream")
#  field(OUT,  "@$(PROTO).proto setLowSpeed $(PORT)")
#   field(ZNAM, "High Speed")
#   field(ONAM, "Low Speed")
#}

#record(seq, "$(P):LowSpeed:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):LowSpeed:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):LowSpeed:rbk.PROC")
#}

record(mbbi, "$(P):Ctrl:Mode:rbk") {
   field(DESC, "Control Input Mode")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCtrlMode $(PORT)") 
   field(ZRST, "Serial")
   field(ONST, "Remote")
   field(TWST, "Front Panel")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

#record(mbbo, "$(P):Ctrl:Mode") {
#   field(DESC, "Control Input Mode")
#   field(ASG, "vtp")
#   field(DTYP, "stream")
#   field(OUT,  "@$(PROTO).proto setCtrlMode $(PORT)") 
#   field(ZRST, "Serial")
#   field(ONST, "Remote")
#   field(TWST, "Front Panel")
#   field(FLNK, "$(P):Ctrl:Mode:upd")
#}

#record(seq, "$(P):Ctrl:Mode:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):Ctrl:Mode:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):Ctrl:Mode:rbk.PROC")
#}

record(bi, "$(P):SoftStart:rbk") {
   field(DESC, "Soft Start (after long shutdown")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSoftStart $(PORT)") 
   field(ZNAM, "No")
   field(ONAM, "Yes")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

#record(bo, "$(P):SoftStart") {
#   field(DESC, "Soft Start (after long shutdown")
#   field(ASG, "vtp")
#   field(DTYP, "stream")
#   field(OUT,  "@$(PROTO).proto setSoftStart $(PORT)") 
#   field(ZNAM, "No")
#   field(ONAM, "Yes")
#   field(FLNK, "$(P):SoftStart:upd")
#}

#record(seq, "$(P):SoftStart:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):SoftStart:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):SoftStart:rbk.PROC")
#}

record(bi, "$(P):ActiveStop:rbk") {
   field(DESC, "Active Breaking")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getActiveStop $(PORT)")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

#record(bo, "$(P):ActiveStop") {
#   field(DESC, "Active Breaking")
#   field(ASG, "vtp")
#   field(DTYP, "stream")
#   field(OUT,  "@$(PROTO).proto setActiveStop $(PORT)")
#   field(ZNAM, "No")
#   field(ONAM, "Yes")
#   field(FLNK, "$(P):ActiveStop:upd")
#}

#record(seq, "$(P):ActiveStop:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):ActiveStop:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):ActiveStop:rbk.PROC")
#}

record(mbbi, "$(P):BaudRate:rbk") {
   field(DESC, "Baud Rate")
   field(DTYP, "stream")
   field(INP, "@$(PROTO).proto getBaudRate $(PORT)")
   field(ZRST, "600")
   field(ONST, "1200")
   field(TWST, "2400")
   field(THST, "4800")
   field(FRST, "9600")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

#record(mbbo, "$(P):BaudRate") {
#   field(DESC, "Baud Rate")
#   field(ASG, "vtp")
#   field(DTYP, "stream")
#   field(OUT, "@$(PROTO).proto setBaudRate $(PORT)")
#   field(ZRST, "600")
#   field(ONST, "1200")
#   field(TWST, "2400")
#   field(THST, "4800")
#   field(FRST, "9600")
#   field(FLNK, "$(P):BaudRate:upd")
#}

#record(seq, "$(P):BaudRate:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):BaudRate:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):BaudRate:rbk.PROC")
#}

record(ai, "$(P):Freq:LowSpeed:rbk") {
   field(DESC, "Low Speed Set Point")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getLowSpeedFreq $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
   field(EGU, "Hz")
}

#record(ao, "$(P):Freq:LowSpeed") {
#   field(DESC, "Low Speed Set Point")
#   field(ASG, "vtp")
#   field(DTYP, "stream")
#   field(OUT,  "@$(PROTO).proto setLowSpeedFreq $(PORT)")
#   field(EGU, "Hz")
#   field(FLNK, "$(P):Freq:LowSpeed:upd")
#}

#record(seq, "$(P):Freq:LowSpeed:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):Freq:LowSpeed:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):Freq:LowSpeed:rbk.PROC")
#}

record(ai, "$(P):Freq:rbk") {
   field(DESC, "Normal Speed Set Point")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getRotFreq $(PORT)")
   field(EGU, "Hz")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

#record(ao, "$(P):Freq") {
#   field(DESC, "Normal Speed Set Point")
#   field(ASG, "vtp")
#   field(DTYP, "stream")
#   field(OUT,  "@$(PROTO).proto setRotFreq $(PORT)")
#   field(EGU, "Hz")
#   field(FLNK, "$(P):Freq:upd")
#}

#record(seq, "$(P):Freq:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):Freq:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):Freq:rbk.PROC")
#}

record(ai, "$(P):Freq:Max:rbk") {
   field(DESC, "Maximum Speed Set Point")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getMaxRotFreq $(PORT)")
   field(EGU, "Hz")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

#record(ao, "$(P):Freq:Max") {
#   field(DESC, "Maximum Speed Set Point")
#   field(ASG, "vtp")
#   field(DTYP, "stream")
#   field(OUT,  "@$(PROTO).proto setMaxRotFreq $(PORT)")
#   field(EGU, "Hz")
#   field(FLNK, "$(P):Freq:Max:upd")
#}

#record(seq, "$(P):Freq:Max:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):Freq:Max:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):Freq:Max:rbk.PROC")
#}

#record(ai, "$(P):Freq:fbk") {
#   field(DESC, "Rotation Rate")
#   field(DTYP, "stream")
#   field(INP,  "@$(PROTO).proto getFreq $(PORT)")
#   field(EGU, "rpm")
#   field(PREC, "1")
#   field(SCAN, "Event")
#   field(EVNT, "$(EVFAST)")
#}

record(ai, "$(P):Freq:Driving") {
   field(DESC, "Driving Frequency")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getDrivingFreq $(PORT)")
   field(EGU, "Hz")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(bi, "$(P):StopSpeedRead:rbk") {
   field(DESC, "Enable Speed Readings after Stop")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getStopSpeedRead $(PORT)")
   field(ZNAM, "Disabled")
   field(ONAM, "Enabled")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

#record(bo, "$(P):StopSpeedRead") {
#   field(DESC, "Enable Speed Readings after Stop")
#   field(ASG, "vtp")
#   field(DTYP, "stream")
#   field(OUT,  "@$(PROTO).proto setStopSpeedRead $(PORT)")
#   field(ZNAM, "Disabled")
#   field(ONAM, "Enabled")
#   field(FLNK, "$(P):StopSpeedRead:upd")
#}

#record(seq, "$(P):StopSpeedRead:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):StopSpeedRead:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):StopSpeedRead:rbk.PROC")
#}

record(ai, "$(P):Current") {
   field(DESC, "Current Draw")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCurrent $(PORT)")
   field(EGU, "mA")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(ai, "$(P):Voltage") {
   field(DESC, "Applied Voltage")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getVoltage $(PORT)")
   field(EGU, "V")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(ai, "$(P):Power") {
   field(DESC, "Power Consumption")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getPower $(PORT)")
   field(EGU, "W")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(ai, "$(P):Temp") {
   field(DESC, "Pump Bearing Temperature")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getTemperature $(PORT)")
   field(EGU, "C")
   field(PREC, "1")
   #field(FLNK, "$(P):Temp")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(ai, "$(P):Temp:HeatSink") {
   field(DESC, "Controller Heat Sink Temperature")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getHeatSinkTemp $(PORT)")
   field(EGU, "C")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(ai, "$(P):Temp:Body") {
   field(DESC, "Pump Body Temperature")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getBodyTemp $(PORT)")
   field(EGU, "C")
   field(PREC, "1")
   #field(FLNK, "$(P):Temp:Body")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(mbbi, "$(P):Status") {
   field(DESC, "Pump Status")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getStatus $(PORT)")
   field(ZRST, "Stop")		field(ZRVL, "0") 
   field(ONST, "Waiting Itlk")	field (ONVL, "1")
   field(TWST, "Starting")	field (TWVL, "2")
   field(THST, "Auto-tuning")	field (THVL, "3")
   field(FRST, "Braking")	field (FRVL, "4")
   field(FVST, "Normal")	field (FVVL, "5")
   field(SXST, "Fail")		field (SXVL, "6")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(ai, "$(P):Counters:CycleTime") {
   field(DESC, "Cycle time")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCycleTime $(PORT)")
   field(EGU, "min.")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(ai, "$(P):Counters:CycleNum") {
   field(DESC, "Cycle number")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCycleNumber $(PORT)")
   field(EGU, "")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(ai, "$(P):Counters:Life") {
   field(DESC, "Pump Life")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getLife $(PORT)")
   field(EGU, "hr.")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(stringin, "$(P):CRC:EPROM") {
   field(DESC, "CRC EPROM")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCRCEPROM $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):CRC:Param") {
   field(DESC, "CRC Parameter")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCRCPar $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):CRC:Param:Struct") {
   field(DESC, "CRC Parameter Structure")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCRCParStruct $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):Listing:Program") {
   field(DESC, "Program Listing code and revision")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getProgListCode $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):Listing:Parameter") {
   field(DESC, "Program Listing code and revision")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getParListCode $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbi, "$(P):Serial:Type:rbk") {
   field(DESC, "Serial Comm. Type")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSerialType $(PORT)")
   field(ZRST, "RS-232")
   field(ONST, "RS-485")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

#record(mbbo, "$(P):Serial:Type") {
#   field(DESC, "Serial Comm. Type")
#   field(ASG, "vtp")
#   field(DTYP, "stream")
#   field(OUT,  "@$(PROTO).proto setSerialType $(PORT)")
#   field(ZRST, "RS-232")
#   field(ONST, "RS-485")
#   field(FLNK, "$(P):Serial:Type:upd")
#}

#record(seq, "$(P):Serial:Type:upd") {
#   field(DESC, "Update RBK after setting")
#   field(DOL1, "1")
#   field(DLY1, "0.5")
#   field(LNK1, "$(P):Serial:Type:rbk.PROC")
#   field(DOL2, "1")
#   field(DLY2, "2.0")
#   field(LNK2, "$(P):Serial:Type:rbk.PROC")
#}

#
# Error handling
#
record(mbbi, "$(P):Error:Resp") {
   field(DESC, "Last Request Error Response")
   field(DTYP, "stream")
   field(SCAN, "I/O Intr")
   field(INP,  "@$(PROTO).proto trapErrors $(PORT)")
   field(ZRST, "No Error")		field(ZRVL, "0xff")
   field(ONST, "Command Failed")	field(ONVL, "0x15")
   field(TWST, "Unknown Command Code")	field(TWVL, "0x32")
   field(THST, "Wrong Data Type")	field(THVL, "0x33")
   field(FRST, "Out of Range")		field(FRVL, "0x34")
   field(FVST, "Command Disabled")	field(FVVL, "0x35")
   field(FLNK, "$(P):Error:Code")
}

record(mbbiDirect, "$(P):Error:Code") {
   field(DESC, "Error Code")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getErrorCode $(PORT)")
}

#
# These control the fast and slow update rates and provide a
# PV to trigger single-shot updates.
#
record(event, "$(P):Update:fast")
{
   field(DESC, "Trigger for fast updates")
   field(SCAN, "1 second")
   field(VAL, "$(EVFAST)")
}

record(event, "$(P):Update:slow")
{
   field(DESC, "Trigger for slow updates")
   field(SCAN, "5 second")
   field(VAL, "$(EVSLOW)")
}

# Single-shot update
# We use a series of sequences rather than a single event because
# the latter seems to put too many requests on the queue and the
# processing times out for "later" PVs.
record(bo, "$(P):Update") {
   field(DESC, "Trigger for one-shot updates")
   field(ZNAM, "Update")
   field(ONAM, "Updating")
   field(FLNK, "$(P):Update:clc")
}
record(calcout, "$(P):Update:clc") {
   field(OOPT, "When Non-zero")
   field(DOPT, "Use OCAL")
   field(INPA, "$(P):Update")
   field(CALC, "A")
   field(OCAL, "1")
   field(OUT, "$(P):Update:0.PROC")
}

# Storage for fast and slow update periods because we will be
# setting them to Passive to disable their respective updates.
record(longout, "$(P):Update:fast:prev") {
   field(VAL, "6")
}
record(longout, "$(P):Update:slow:prev") {
   field(VAL, "4")
}

# Now the series of single-shot sequences.
# ":Update:0" sets it up, ":Update:L" cleans up
# Record processed in order of ascending Window Code.
record(seq, "$(P):Update:0") {
   field(PINI, "1")
   field(DOL1, "$(P):Update:fast.SCAN")
   field(LNK1, "$(P):Update:fast:prev")
   field(DOL2, "$(P):Update:slow.SCAN")
   field(LNK2, "$(P):Update:slow:prev")
   field(DOL3, "0")
   field(LNK3, "$(P):Update:fast.SCAN")
   field(DOL4, "0")
   field(LNK4, "$(P):Update:slow.SCAN")
   field(LNKA, "$(P):Update:1.PROC PP")
}
record(seq, "$(P):Update:1") {
   field(LNK1, "$(P):Ctrl:Mode:rbk.PROC")
   field(LNK2, "$(P):SoftStart:rbk.PROC")
   field(LNK3, "$(P):ActiveStop:rbk.PROC")
   field(LNK4, "$(P):BaudRate:rbk.PROC")
   field(LNK5, "$(P):Freq:LowSpeed:rbk.PROC")
   field(LNK6, "$(P):Freq:rbk.PROC")
   field(LNK7, "$(P):Freq:Max:rbk.PROC")
   field(LNK8, "$(P):StopSpeedRead:rbk.PROC")
   field(LNK9, "$(P):CRC:EPROM.PROC")
   field(LNKA, "$(P):Update:2.PROC")
   field(DLY2, "0.1")
   field(DLY3, "0.1")
   field(DLY4, "0.1")
   field(DLY5, "0.1")
   field(DLY6, "0.1")
   field(DLY7, "0.1")
   field(DLY8, "0.1")
   field(DLY9, "0.1")
   field(DLYA, "0.1")
}
record(seq, "$(P):Update:2") {
   field(LNK1, "$(P):CRC:Param.PROC")
   field(LNK2, "$(P):CRC:Param:Struct.PROC")
   field(LNK3, "$(P):Listing:Program.PROC")
   field(LNK4, "$(P):Listing:Parameter.PROC")
   field(LNK5, "$(P):Serial:Type:rbk.PROC")
   field(LNKA, "$(P):Update:L.PROC")
   field(DLY2, "0.1")
   field(DLY3, "0.1")
   field(DLY4, "0.1")
   field(DLYA, "0.1")
}
record(seq, "$(P):Update:L") {
   field(DOL1, "$(P):Update:fast:prev")
   field(LNK1, "$(P):Update:fast.SCAN PP")
   field(DOL2, "$(P):Update:slow:prev")
   field(LNK2, "$(P):Update:slow.SCAN PP")
   field(DOLA, "0")
   field(LNKA, "$(P):Update PP")
}
