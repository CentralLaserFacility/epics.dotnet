#
# Records for Varian/Agilent Turbomolecular Pump Controllers
#
# Macro Definitions:
# 
# P        - prefix
# PROTO    - name of protocol file
# PORT     - asyn port name
# EVFAST   - EPICS event number for fast updates
# EVSLOW   - EPICS event number for slow updates
# EVSINGLE - EPICS event number for single-shot updates

record(bi, "$(P):Start:rbk") {
   field(DESC, "Start/Stop")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getStart $(PORT)")
   field(ZNAM, "Stopped")
   field(ONAM, "Running")
   field(PINI, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(bo, "$(P):Start") {
   field(DESC, "Start/Stop")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setStart $(PORT)")
   field(ZNAM, "Stopped")
   field(ONAM, "Running")
   field(FLNK, "$(P):Start:upd")
}

record(seq, "$(P):Start:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Start:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Start:rbk.PROC")
}

record(bi, "$(P):LowSpeed:rbk") {
   field(DESC, "Run at Low Speed")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getLowSpeed $(PORT)")
   field(ZNAM, "High Speed")
   field(ONAM, "Low Speed")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(bo, "$(P):LowSpeed") {
   field(DESC, "Run at Low Speed")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setLowSpeed $(PORT)")
   field(ZNAM, "High Speed")
   field(ONAM, "Low Speed")
}

record(seq, "$(P):LowSpeed:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):LowSpeed:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):LowSpeed:rbk.PROC")
}

record(bi, "$(P):Ctrl:Mode:rbk") {
   field(DESC, "Control Input Mode")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCtrlMode $(PORT)") 
   field(ZNAM, "Serial")
   field(ONAM, "Remote")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):Ctrl:Mode") {
   field(DESC, "Control Input Mode")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setCtrlMode $(PORT)") 
   field(ZNAM, "Serial")
   field(ONAM, "Remote")
   field(FLNK, "$(P):Ctrl:Mode:upd")
}

record(seq, "$(P):Ctrl:Mode:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Ctrl:Mode:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Ctrl:Mode:rbk.PROC")
}

record(bi, "$(P):SoftStart:rbk") {
   field(DESC, "Soft Start (after long shutdown")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSoftStart $(PORT)") 
   field(ZNAM, "No")
   field(ONAM, "Yes")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):SoftStart") {
   field(DESC, "Soft Start (after long shutdown")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSoftStart $(PORT)") 
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(FLNK, "$(P):SoftStart:upd")
}

record(seq, "$(P):SoftStart:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SoftStart:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SoftStart:rbk.PROC")
}

record(mbbi, "$(P):SetPoint:Type:rbk") {
   field(DESC, "Relay 2 Speed set point type")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP1Type $(PORT)")
   field(ZRST, "Frequency") field(ZRVL, "0") 
   field(ONST, "Power")     field (ONVL, "1")
   field(TWST, "Time")      field (TWVL, "2")
   field(THST, "Normal")    field (THVL, "3")
   field(FRST, "Pressure")  field (FRVL, "4")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):SetPoint:Type") {
   field(DESC, "Relay 1 Speed set point type")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSP1Type $(PORT)")
   field(ZRST, "Frequency") 
   field(ONST, "Power")
   field(TWST, "Time")
   field(THST, "Normal")
   field(FRST, "Pressure")
   field(FLNK, "$(P):SetPoint:Type:upd")
}

record(seq, "$(P):SetPoint:Type:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint:Type:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint:Type:rbk.PROC")
}

record(ai, "$(P):SetPoint:rbk") {
   field(DESC, "Relay 1 Speed set point")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSetPoint $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPoint") {
   field(DESC, "Relay 1 Speed set point")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSetPoint $(PORT)")
   field(FLNK, "$(P):SetPoint:upd")
}

record(seq, "$(P):SetPoint:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint:rbk.PROC")
}

record(ai, "$(P):SetPoint:Pressure:rbk") {
   field(DESC, "Relay 1 Speed set point by pressure")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP1Press $(PORT)")
   field(EGU, "Torr")
   field(PREC, "1")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPoint:Pressure") {
   field(DESC, "Relay 1 Speed set point by pressure")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSP1Press $(PORT)")
   field(EGU, "Torr")
   field(PREC, "1")
   field(FLNK, "$(P):SetPoint:Pressure:upd")
}

record(seq, "$(P):SetPoint:Pressure:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint:Pressure:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint:Pressure:rbk.PROC")
}

record(ai, "$(P):SetPoint:Delay:rbk") {
   field(DESC, "Relay 1 Speed delay")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP1Delay $(PORT)")
   field(EGU, "s")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPoint:Delay") {
   field(DESC, "Relay 1 Speed delay")
   field(DTYP, "stream")
   field(EGU, "s")
   field(OUT,  "@$(PROTO).proto setSP1Delay $(PORT)")
   field(FLNK, "$(P):SetPoint:Delay:upd")
}

record(seq, "$(P):SetPoint:Delay:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint:Delay:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint:Delay:rbk.PROC")
}

record(bi, "$(P):SetPoint:Signal:rbk") {
   field(DESC, "Relay 1 Speed Signal Type")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP1Signal $(PORT)")
   field(ZNAM, "High")
   field(ONAM, "Low")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):SetPoint:Signal") {
   field(DESC, "Relay 1 Speed Signal Type")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSP1Signal $(PORT)")
   field(ZNAM, "High")
   field(ONAM, "Low")
   field(FLNK, "$(P):SetPoint:Signal:upd")
}

record(seq, "$(P):SetPoint:Signal:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint:Signal:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint:Signal:rbk.PROC")
}

record(ai, "$(P):SetPoint:Hyst:rbk") {
   field(DESC, "Relay 1 Speed Hysteresis")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP1Hyst $(PORT)")
   field(EGU, "%")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPoint:Hyst") {
   field(DESC, "Relay 1 Speed Hysteresis")
   field(DTYP, "stream")
   field(EGU, "%")
   field(OUT,  "@$(PROTO).proto setSP1Hyst $(PORT)")
   field(FLNK, "$(P):SetPoint:Hyst:upd")
}

record(seq, "$(P):SetPoint:Hyst:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint:Hyst:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint:Hyst:rbk.PROC")
}

record(bi, "$(P):WaterCooled:rbk") {
   field(DESC, "Water Cooled Operation")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getWaterCooled $(PORT)")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):WaterCooled") {
   field(DESC, "Water Cooled Operation")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setWaterCooled $(PORT)")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(FLNK, "$(P):WaterCooled:upd")
}

record(seq, "$(P):WaterCooled:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):WaterCooled:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):WaterCooled:rbk.PROC")
}

record(bi, "$(P):ActiveStop:rbk") {
   field(DESC, "Active Breaking")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getActiveStop $(PORT)")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):ActiveStop") {
   field(DESC, "Active Breaking")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setActiveStop $(PORT)")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(FLNK, "$(P):ActiveStop:upd")
}

record(seq, "$(P):ActiveStop:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):ActiveStop:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):ActiveStop:rbk.PROC")
}

record(mbbi, "$(P):BaudRate:rbk") {
   field(DESC, "Baud Rate")
   field(DTYP, "stream")
   field(INP, "@$(PROTO).proto getBaudRate $(PORT)")
   field(ZRST, "600")
   field(ONST, "1200")
   field(TWST, "2400")
   field(THST, "4800")
   field(FRST, "9600")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):BaudRate") {
   field(DESC, "Baud Rate")
   field(DTYP, "stream")
   field(OUT, "@$(PROTO).proto setBaudRate $(PORT)")
   field(ZRST, "600")
   field(ONST, "1200")
   field(TWST, "2400")
   field(THST, "4800")
   field(FRST, "9600")
   field(FLNK, "$(P):BaudRate:upd")
}

record(seq, "$(P):BaudRate:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):BaudRate:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):BaudRate:rbk.PROC")
}

record(bo, "$(P):Counters:Reset") {
   field(DESC, "Reset Lifetime Counters")
   field(DTYP, "stream")
   field(OUT, "@$(PROTO).proto setResetCounters $(PORT)")
   field(ZNAM, "Reset")
   field(ONAM, "Resetting")
   field(HIGH, "0.1")
}

record(mbbi, "$(P):InterlockType:rbk") {
   field(DESC, "Interlock type for Interlocked Op.")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getInterlockType $(PORT)")
   field(ZRST, "Impulse")
   field(ONST, "Continuous")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):InterlockType") {
   field(DESC, "Interlock type for Interlocked Op.")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setInterlockType $(PORT)")
   field(ZRST, "Impulse")
   field(ONST, "Continuous")
   field(FLNK, "$(P):InterlockType:upd")
}

record(seq, "$(P):InterlockType:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):InterlockType:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):InterlockType:rbk.PROC")
}

record(mbbi, "$(P):AnalogOutType:rbk") {
   field(DESC, "Variable for Analog Output")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getAnalogOutType $(PORT)")
   field(ZRST, "Frequency") field(ZRVL, "0") 
   field(ONST, "Power")     field (ONVL, "1")
   field(TWST, "Temperature")      field (TWVL, "2")
   field(THST, "Pressure")      field (THVL, "3")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):AnalogOutType") {
   field(DESC, "Variable for Analog Output")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setAnalogOutType $(PORT)")
   field(ZRST, "Frequency") 
   field(ONST, "Power")
   field(TWST, "Temperature")
   field(THST, "Pressure")
   field(FLNK, "$(P):AnalogOutType:upd")
}

record(seq, "$(P):AnalogOutType:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):AnalogOutType:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):AnalogOutType:rbk.PROC")
}

record(ai, "$(P):Freq:LowSpeed:rbk") {
   field(DESC, "Low Speed Set Point")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getLowSpeedFreq $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
   field(EGU, "Hz")
}

record(ao, "$(P):Freq:LowSpeed") {
   field(DESC, "Low Speed Set Point")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setLowSpeedFreq $(PORT)")
   field(EGU, "Hz")
   field(FLNK, "$(P):Freq:LowSpeed:upd")
}

record(seq, "$(P):Freq:LowSpeed:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Freq:LowSpeed:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Freq:LowSpeed:rbk.PROC")
}

record(ai, "$(P):Freq:rbk") {
   field(DESC, "Normal Speed Set Point")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getRotFreq $(PORT)")
   field(EGU, "Hz")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):Freq") {
   field(DESC, "Normal Speed Set Point")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setRotFreq $(PORT)")
   field(EGU, "Hz")
   field(FLNK, "$(P):Freq:upd")
}

record(seq, "$(P):Freq:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Freq:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Freq:rbk.PROC")
}

record(ai, "$(P):Freq:fbk") {
   field(DESC, "Rotation Rate")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getFreq $(PORT)")
   field(EGU, "rpm")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(ai, "$(P):Freq:Driving") {
   field(DESC, "Driving Frequency")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getDrivingFreq $(PORT)")
   field(EGU, "Hz")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(seq, "$(P):Freq:Driving:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Freq:Driving:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Freq:Driving:rbk.PROC")
}

record(ai, "$(P):Freq:max:rbk") {
   field(DESC, "Max. Allowable Speed")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getMaxRotFreq $(PORT)")
   field(EGU, "Hz")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):Freq:max") {
   field(DESC, "Max. Allowable Speed")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setMaxRotFreq $(PORT)")
   field(EGU, "rpm")
   field(FLNK, "$(P):Freq:max:upd")
}

record(seq, "$(P):Freq:max:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Freq:max:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Freq:max:rbk.PROC")
}

record(bi, "$(P):VentValve:rbk") {
   field(DESC, "Open/Close Vent Valve")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getVentValve $(PORT)")
   field(ZNAM, "Closed")
   field(ONAM, "Open")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
   field(ZSV, "NO_ALARM")
   field(OSV, "MAJOR")
}

record(bo, "$(P):VentValve") {
   field(DESC, "Open/Close Vent Valve")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setVentValve $(PORT)")
   field(ZNAM, "Closed")
   field(ONAM, "Open")
   field(ZSV, "NO_ALARM")
   field(OSV, "MAJOR")
   field(FLNK, "$(P):VentValve:upd")
}

record(seq, "$(P):VentValve:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):VentValve:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):VentValve:rbk.PROC")
}

record(bi, "$(P):VentValve:Mode:rbk") {
   field(DESC, "Vent Valve Operating Mode")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getVentValveMode $(PORT)")
   field(ZNAM, "Automatic")
   field(ONAM, "Command")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):VentValve:Mode") {
   field(DESC, "Vent Valve Operating Mode")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setVentValveMode $(PORT)")
   field(ZNAM, "Automatic")
   field(ONAM, "Command")
   field(FLNK, "$(P):VentValve:Mode:upd")
}

record(seq, "$(P):VentValve:Mode:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):VentValve:Mode:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):VentValve:Mode:rbk.PROC")
}

record(ai, "$(P):VentValve:Delay:rbk") {
   field(DESC, "Vent Valve Opening Delay")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getVentValveDelay $(PORT)")
   field(EGU, "x0.2 s")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):VentValve:Delay") {
   field(DESC, "Vent Valve Opening Delay")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setVentValveDelay $(PORT)")
   field(EGU, "x0.2 s")
   field(FLNK, "$(P):VentValve:Delay:upd")
}

record(seq, "$(P):VentValve:Delay:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):VentValve:Delay:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):VentValve:Delay:rbk.PROC")
}

record(ai, "$(P):VentValve:Time:rbk") {
   field(DESC, "Vent Valve Open Time")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getVentOpenTime $(PORT)")
   field(EGU, "x0.2 s")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):VentValve:Time") {
   field(DESC, "Vent Valve Open Time")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setVentOpenTime $(PORT)")
   field(EGU, "x0.2 s")
   field(FLNK, "$(P):VentValve:Time:upd")
}

record(seq, "$(P):VentValve:Time:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):VentValve:Time:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):VentValve:Time:rbk.PROC")
}

record(mbbi, "$(P):SetPointG:Type:rbk") {
   field(DESC, "Gauge set point type")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getGaugeSPType $(PORT)")
   field(ZRST, "Frequency") field(ZRVL, "0") 
   field(ONST, "Power")     field (ONVL, "1")
   field(TWST, "Time")      field (TWVL, "2")
   field(THST, "Normal")    field (THVL, "3")
   field(FRST, "Pressure")  field (FRVL, "4")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):SetPointG:Type") {
   field(DESC, "Gauge set point type")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setGaugeSPType $(PORT)")
   field(ZRST, "Frequency") 
   field(ONST, "Power")
   field(TWST, "Time")
   field(THST, "Normal")
   field(FRST, "Pressure")
   field(FLNK, "$(P):SetPointG:Type:upd")
}

record(seq, "$(P):SetPointG:Type:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPointG:Type:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPointG:Type:rbk.PROC")
}

record(ai, "$(P):SetPointG:rbk") {
   field(DESC, "Gauge set point")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getGaugeSP $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPointG") {
   field(DESC, "Gauge set point")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setGaugeSP $(PORT)")
   field(FLNK, "$(P):SetPointG:upd")
}

record(seq, "$(P):SetPointG:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPointG:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPointG:rbk.PROC")
}

# The gauge setpoints do not have a "pressure" variable
# but we create one to match the other setpoints.
record(stringin, "$(P):SetPointG:Pressure:rbk")
{
   field(VAL, "n/a")
}

record(stringout, "$(P):SetPointG:Pressure")
{
   field(VAL, "n/a")
}

record(ai, "$(P):SetPointG:Delay:rbk") {
   field(DESC, "Gauge set point delay")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getGaugeSPDelay $(PORT)")
   field(EGU, "s")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPointG:Delay") {
   field(DESC, "Gauge set point delay")
   field(DTYP, "stream")
   field(EGU, "s")
   field(OUT,  "@$(PROTO).proto setGaugeSPDelay $(PORT)")
   field(FLNK, "$(P):SetPointG:Delay:upd")
}

record(seq, "$(P):SetPointG:Delay:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPointG:Delay:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPointG:Delay:rbk.PROC")
}

record(bi, "$(P):SetPointG:Signal:rbk") {
   field(DESC, "Gauge set point Signal Type")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getGaugeSPSignal $(PORT)")
   field(ZNAM, "High")
   field(ONAM, "Low")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):SetPointG:Signal") {
   field(DESC, "Gauge set point Signal Type")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setGaugeSPSignal $(PORT)")
   field(ZNAM, "High")
   field(ONAM, "Low")
   field(FLNK, "$(P):SetPointG:Signal:upd")
}

record(seq, "$(P):SetPointG:Signal:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPointG:Signal:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPointG:Signal:rbk.PROC")
}

record(ai, "$(P):SetPointG:Hyst:rbk") {
   field(DESC, "Gauge set point Hysteresis")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getGaugeSPHyst $(PORT)")
   field(EGU, "%")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPointG:Hyst") {
   field(DESC, "Gauge set point Hysteresis")
   field(DTYP, "stream")
   field(EGU, "%")
   field(OUT,  "@$(PROTO).proto setGaugeSPHyst $(PORT)")
   field(FLNK, "$(P):SetPointG:Hyst:upd")
}

record(seq, "$(P):SetPointG:Hyst:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPointG:Hyst:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPointG:Hyst:rbk.PROC")
}

record(mbbi, "$(P):ExtFan:Config:rbk") {
   field(DESC, "External Fan Configuration")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getExtFanConfig $(PORT)")
   field(ZRST, "On")		field(ZRVL, "0") 
   field(ONST, "Auto")		field(ONVL, "1")
   field(TWST, "Serial")	field(TWVL, "2")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):ExtFan:Config") {
   field(DESC, "External Fan Configuration")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setExtFanConfig $(PORT)")
   field(ZRST, "On")
   field(ONST, "Auto")
   field(TWST, "Serial")
   field(FLNK, "$(P):ExtFan:Config:upd")
}

record(seq, "$(P):ExtFan:Config:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):ExtFan:Config:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):ExtFan:Config:rbk.PROC")
}

record(bi, "$(P):ExtFan:rbk") {
   field(DESC, "External Fan On/Off")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getExtFan $(PORT)")
   field(ZNAM, "Off")
   field(ONAM, "On")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):ExtFan") {
   field(DESC, "External Fan On/Off")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setExtFan $(PORT)")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(FLNK, "$(P):ExtFan:upd")
}

record(seq, "$(P):ExtFan:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):ExtFan:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):ExtFan:rbk.PROC")
}

record(ai, "$(P):Power:Limit") {
   field(DESC, "Max. Allowable Power")
   field(DTYP, "stream")
   field(EGU, "W")
   field(INP,  "@$(PROTO).proto getPowerLimit $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbi, "$(P):Gas:LoadType:rbk") {
   field(DESC, "Gas Load Type for Power Limit")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getLoadType $(PORT)")
   field(ZRST, "N2")		field(ZRVL, "0") 
   field(ONST, "Ar")		field(ONVL, "1")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):Gas:LoadType") {
   field(DESC, "Gas Load Type for Power Limit")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setLoadType $(PORT)")
   field(ZRST, "N2")
   field(ONST, "Ar")
   field(FLNK, "$(P):Gas:LoadType:upd")
}

record(seq, "$(P):Gas:LoadType:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Gas:LoadType:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Gas:LoadType:rbk.PROC")
}

record(mbbi, "$(P):Gas:Type:rbk") {
   field(DESC, "Gas Type for Gauge")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getGasType $(PORT)")
   field(ZRST, "n/a")		field(ZRVL, "0") 
   field(ONST, "N2")		field (ONVL, "1")
   field(TWST, "Ar")		field (TWVL, "2")
   field(THST, "H")		field (THVL, "3")
   field(FRST, "other")		field (FRVL, "4")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):Gas:Type") {
   field(DESC, "Gas Type for Gauge")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setGasType $(PORT)")
   field(ZRST, "n/a")		field(ZRVL, "0") 
   field(ONST, "N2")		field (ONVL, "1")
   field(TWST, "Ar")		field (TWVL, "2")
   field(THST, "H")		field (THVL, "3")
   field(FRST, "other")		field (FRVL, "4")
   field(FLNK, "$(P):Gas:Type:upd")
}

record(seq, "$(P):Gas:Type:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Gas:Type:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Gas:Type:rbk.PROC")
}

record(ai, "$(P):Pressure:Corr:rbk") {
   field(DESC, "Pressure Correction for Other Gas")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getOtherGCorr $(PORT)")
   field(EGU, "/10")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):Pressure:Corr") {
   field(DESC, "Pressure Correction for Other Gas")
   field(DTYP, "stream")
   field(EGU, "/10")
   field(DRVL, "0.1")	field(LOPR, "0.1")
   field(DRVH, "9.99")	field(HOPR, "9.99")
   field(OUT,  "@$(PROTO).proto setOtherGCorr $(PORT)")
   field(FLNK, "$(P):Pressure:Corr:upd")
}

record(seq, "$(P):Pressure:Corr:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Pressure:Corr:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Pressure:Corr:rbk.PROC")
}

record(ai, "$(P):Pressure:Corr:Gauge:rbk") {
   field(DESC, "Pressure Correction within Gauge")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getGaugePCorr $(PORT)")
   field(EGU, "/10")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):Pressure:Corr:Gauge") {
   field(DESC, "Pressure Correction within Gauge")
   field(DTYP, "stream")
   field(EGU, "/10")
   field(DRVL, "0.1")	field(LOPR, "0.1")
   field(DRVH, "9.99")	field(HOPR, "9.99")
   field(OUT,  "@$(PROTO).proto setGaugePCorr $(PORT)")
   field(FLNK, "$(P):Pressure:Corr:Gauge:upd")
}

record(seq, "$(P):Pressure:Corr:Gauge:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Pressure:Corr:Gauge:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Pressure:Corr:Gauge:rbk.PROC")
}

record(mbbi, "$(P):Pressure:Units:rbk") {
   field(DESC, "Pressure Units")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getPressUnits $(PORT)")
   field(ZRST, "mBar")	field(ZRVL, "0") 
   field(ONST, "Pa")	field (ONVL, "1")
   field(TWST, "Torr")	field (TWVL, "2")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):Pressure:Units") {
   field(DESC, "Pressure Units")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setPressUnits $(PORT)")
   field(ZRST, "mBar") 
   field(ONST, "Pa")
   field(TWST, "Torr")
   field(FLNK, "$(P):Pressure:Units:upd")
}

record(seq, "$(P):Pressure:Units:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Pressure:Units:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Pressure:Units:rbk.PROC")
}

record(bi, "$(P):StopSpeedRead:rbk") {
   field(DESC, "Enable Speed Readings after Stop")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getStopSpeedRead $(PORT)")
   field(ZNAM, "Disabled")
   field(ONAM, "Enabled")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):StopSpeedRead") {
   field(DESC, "Enable Speed Readings after Stop")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setStopSpeedRead $(PORT)")
   field(ZNAM, "Disabled")
   field(ONAM, "Enabled")
   field(FLNK, "$(P):StopSpeedRead:upd")
}

record(seq, "$(P):StopSpeedRead:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):StopSpeedRead:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):StopSpeedRead:rbk.PROC")
}

record(mbbi, "$(P):SetPoint2:Type:rbk") {
   field(DESC, "Relay 2 Speed set point type")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP2Type $(PORT)")
   field(ZRST, "Frequency") field(ZRVL, "0") 
   field(ONST, "Power")     field (ONVL, "1")
   field(TWST, "Time")      field (TWVL, "2")
   field(THST, "Normal")    field (THVL, "3")
   field(FRST, "Pressure")  field (FRVL, "4")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):SetPoint2:Type") {
   field(DESC, "Relay 2 Speed set point type")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSP2Type $(PORT)")
   field(ZRST, "Frequency") 
   field(ONST, "Power")
   field(TWST, "Time")
   field(THST, "Normal")
   field(FRST, "Pressure")
   field(FLNK, "$(P):SetPoint2:Type:upd")
}

record(seq, "$(P):SetPoint2:Type:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint2:Type:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint2:Type:rbk.PROC")
}

record(ai, "$(P):SetPoint2:rbk") {
   field(DESC, "Relay 2 Speed set point")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSetPoint $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPoint2") {
   field(DESC, "Relay 2 Speed set point")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSetPoint $(PORT)")
   field(FLNK, "$(P):SetPoint2:upd")
}

record(seq, "$(P):SetPoint2:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint2:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint2:rbk.PROC")
}

record(ai, "$(P):SetPoint2:Pressure:rbk") {
   field(DESC, "Relay 2 Speed set point by pressure")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP2Press $(PORT)")
   field(EGU, "Torr")
   field(PREC, "1")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPoint2:Pressure") {
   field(DESC, "Relay 2 Speed set point by pressure")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSP2Press $(PORT)")
   field(EGU, "Torr")
   field(PREC, "1")
   field(FLNK, "$(P):SetPoint2:Pressure:upd")
}

record(seq, "$(P):SetPoint2:Pressure:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint2:Pressure:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint2:Pressure:rbk.PROC")
}

record(ai, "$(P):SetPoint2:Delay:rbk") {
   field(DESC, "Relay 2 Speed delay")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP2Delay $(PORT)")
   field(EGU, "s")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPoint2:Delay") {
   field(DESC, "Relay 2 Speed delay")
   field(DTYP, "stream")
   field(EGU, "s")
   field(OUT,  "@$(PROTO).proto setSP2Delay $(PORT)")
   field(FLNK, "$(P):SetPoint2:Delay:upd")
}

record(seq, "$(P):SetPoint2:Delay:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint2:Delay:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint2:Delay:rbk.PROC")
}

record(bi, "$(P):SetPoint2:Signal:rbk") {
   field(DESC, "Relay 2 Speed Signal Type")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP2Signal $(PORT)")
   field(ZNAM, "High")
   field(ONAM, "Low")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):SetPoint2:Signal") {
   field(DESC, "Relay 2 Speed Signal Type")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSP2Signal $(PORT)")
   field(ZNAM, "High")
   field(ONAM, "Low")
   field(FLNK, "$(P):SetPoint2:Signal:upd")
}

record(seq, "$(P):SetPoint2:Signal:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint2:Signal:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint2:Signal:rbk.PROC")
}

record(ai, "$(P):SetPoint2:Hyst:rbk") {
   field(DESC, "Relay 2 Speed Hysteresis")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP2Hyst $(PORT)")
   field(EGU, "%")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(ao, "$(P):SetPoint2:Hyst") {
   field(DESC, "Relay 2 Speed Hysteresis")
   field(DTYP, "stream")
   field(EGU, "%")
   field(OUT,  "@$(PROTO).proto setSP2Hyst $(PORT)")
   field(FLNK, "$(P):SetPoint2:Hyst:upd")
}

record(seq, "$(P):SetPoint2:Hyst:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):SetPoint2:Hyst:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):SetPoint2:Hyst:rbk.PROC")
}

record(bi, "$(P):StartOutput:Mode:rbk") {
   field(DESC, "Start Output's Mode")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getStartOutMode $(PORT)")
   field(ZNAM, "During Start")
   field(ONAM, "While Running")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(bo, "$(P):StartOutput:Mode") {
   field(DESC, "Start Output's Mode")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setStartOutMode $(PORT)")
   field(ZNAM, "During Start")
   field(ONAM, "While Running")
   field(FLNK, "$(P):StartOutput:Mode:upd")
}

record(seq, "$(P):StartOutput:Mode:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):StartOutput:Mode:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):StartOutput:Mode:rbk.PROC")
}

record(ai, "$(P):Current") {
   field(DESC, "Current Draw")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCurrent $(PORT)")
   field(EGU, "mA")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(ai, "$(P):Voltage") {
   field(DESC, "Applied Voltage")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getVoltage $(PORT)")
   field(EGU, "V")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(ai, "$(P):Power") {
   field(DESC, "Power Consumption")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getPower $(PORT)")
   field(EGU, "W")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(ai, "$(P):Temp") {
   field(DESC, "Pump Temperature")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getTemperature $(PORT)")
   field(EGU, "C")
   field(PREC, "1")
   field(FLNK, "$(P):Temp")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(ai, "$(P):Temp:Air") {
   field(DESC, "Air Temperature")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getAirTemp $(PORT)")
   field(EGU, "C")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(ai, "$(P):Temp:HeatSink") {
   field(DESC, "Controller Heat Sink Temperature")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getHeatSinkTemp $(PORT)")
   field(EGU, "C")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(mbbi, "$(P):Status") {
   field(DESC, "Pump Status")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getStatus $(PORT)")
   field(ZRST, "Stop")		field(ZRVL, "0") 
   field(ONST, "Waiting Itlk")	field (ONVL, "1")
   field(TWST, "Starting")	field (TWVL, "2")
   field(THST, "Auto-tuning")	field (THVL, "3")
   field(FRST, "Braking")	field (FRVL, "4")
   field(FVST, "Normal")	field (FVVL, "5")
   field(SXST, "Fail")		field (SXVL, "6")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(bi, "$(P):SetPoint:State") {
   field(DESC, "Relay 1 Speed Set Point State")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP1State $(PORT)")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(bi, "$(P):SetPoint2:State") {
   field(DESC, "Relay 2 Speed Set Point State")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSP2State $(PORT)")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

# The gauge setpoints do not have a "state" variable
# but we create one to match the other setpoints.
record(bi, "$(P):SetPointG:State") {
   field(DESC, "Gauge Set Point State")
   field(ZNAM, "n/a")
   field(ONAM, "n/a")
}

record(ai, "$(P):Pressure") {
   field(DESC, "Pressure Reading")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getPressure $(PORT)")
   field(EGU, "Torr")
   field(PREC, "1")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(mbbi, "$(P):Gauge:Status") {
   field(DESC, "Gauge Status")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getGaugeStatus $(PORT)")
   field(ZRST, "No Gauge")		field(ZRVL, "0") 
   field(ONST, "Gauge Connected")	field (ONVL, "1")
   field(TWST, "Under Range")		field (TWVL, "2")
   field(THST, "Over Range")		field (THVL, "3")
   field(FRST, "RId Unknown")		field (FRVL, "4")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(mbbi, "$(P):Gauge:Power:rbk") {
   field(DESC, "Gauge Power")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getGaugePower $(PORT)")
   field(ZRST, "Gauge Off")	field(ZRVL, "0") 
   field(ONST, "Gauge On")	field (ONVL, "1")
   field(TWST, "Prog., S.P. 1")	field (TWVL, "2")
   field(THST, "Prog., S.P. 2")	field (THVL, "3")
   field(FRST, "Prog., S.P. 3")	field (FRVL, "4")
   field(SCAN, "Event")
   field(EVNT, "$(EVFAST)")
}

record(mbbo, "$(P):Gauge:Power") {
   field(DESC, "Gauge Power")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setGaugePower $(PORT)")
   field(ZRST, "Gauge Off")
   field(ONST, "Gauge On")
   field(TWST, "Prog., S.P. 1")
   field(THST, "Prog., S.P. 2")
   field(FRST, "Prog., S.P. 3")
   field(FLNK, "$(P):Gauge:Power:upd")
}

record(seq, "$(P):Gauge:Power:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Gauge:Power:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Gauge:Power:rbk.PROC")
}

record(ai, "$(P):Counters:CycleTime") {
   field(DESC, "Cycle time")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCycleTime $(PORT)")
   field(EGU, "min.")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(ai, "$(P):Counters:CycleNum") {
   field(DESC, "Cycle number")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCycleNumber $(PORT)")
   field(EGU, "")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(ai, "$(P):Counters:Life") {
   field(DESC, "Pump Life")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getLife $(PORT)")
   field(EGU, "hr.")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(ai, "$(P):Counters:TipSeal") {
   field(DESC, "Tip-seal Life")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getTipSealLife $(PORT)")
   field(EGU, "hr.")
   field(SCAN, "Event")
   field(EVNT, "$(EVSLOW)")
}

record(stringin, "$(P):CRC:EPROM") {
   field(DESC, "CRC EPROM")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCRCEPROM $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):CRC:Boot") {
   field(DESC, "Boot CRC")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getBootCRC $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):CRC:Param") {
   field(DESC, "CRC Parameter")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCRCPar $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):CRC:Param:Struct") {
   field(DESC, "CRC Parameter Structure")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getCRCParStruct $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):CRC:Prog:List:Code") {
   field(DESC, "CRC Program Listing Code")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getProgListCode $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):CRC:Param:List:Code") {
   field(DESC, "CRC Parameter Listing Code")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getParListCode $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(stringin, "$(P):Firmware") {
   field(DESC, "Firmware Revision")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getFirmwareRev $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(longin, "$(P):Serial:Address:rbk") {
   field(DESC, "Serial Comm. Address")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSerialAddr $(PORT)")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(longout, "$(P):Serial:Address") {
   field(DESC, "Serial Comm. Address")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSerialAddr $(PORT)")
   field(FLNK, "$(P):Serial:Address:upd")
}

record(seq, "$(P):Serial:Address:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Serial:Address:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Serial:Address:rbk.PROC")
}

record(mbbi, "$(P):Serial:Type:rbk") {
   field(DESC, "Serial Comm. Type")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getSerialType $(PORT)")
   field(ZRST, "RS-232")
   field(ONST, "RS-485")
   #field(SCAN, "Event")
   #field(EVNT, "$(EVSINGLE)")
}

record(mbbo, "$(P):Serial:Type") {
   field(DESC, "Serial Comm. Type")
   field(DTYP, "stream")
   field(OUT,  "@$(PROTO).proto setSerialType $(PORT)")
   field(ZRST, "RS-232")
   field(ONST, "RS-485")
   field(FLNK, "$(P):Serial:Type:upd")
}

record(seq, "$(P):Serial:Type:upd") {
   field(DESC, "Update RBK after setting")
   field(DOL1, "1")
   field(DLY1, "0.5")
   field(LNK1, "$(P):Serial:Type:rbk.PROC")
   field(DOL2, "1")
   field(DLY2, "2.0")
   field(LNK2, "$(P):Serial:Type:rbk.PROC")
}

#
# Error handling
#
record(mbbi, "$(P):Error:Resp") {
   field(DESC, "Last Request Error Response")
   field(DTYP, "stream")
   field(SCAN, "I/O Intr")
   field(INP,  "@$(PROTO).proto trapErrors $(PORT)")
   field(ZRST, "No Error")		field(ZRVL, "0xff")
   field(ONST, "Command Failed")	field(ONVL, "0x15")
   field(TWST, "Unknown Command Code")	field(TWVL, "0x32")
   field(THST, "Wrong Data Type")	field(THVL, "0x33")
   field(FRST, "Out of Range")		field(FRVL, "0x34")
   field(FVST, "Command Disabled")	field(FVVL, "0x35")
   field(FLNK, "$(P):Error:Code")
}

record(mbbiDirect, "$(P):Error:Code") {
   field(DESC, "Error Code")
   field(DTYP, "stream")
   field(INP,  "@$(PROTO).proto getErrorCode $(PORT)")
}

#
# These control the fast and slow update rates and provide a
# PV to trigger single-shot updates.
#
record(event, "$(P):Update:fast")
{
   field(DESC, "Trigger for fast updates")
   field(SCAN, "1 second")
   field(VAL, "$(EVFAST)")
}

record(event, "$(P):Update:slow")
{
   field(DESC, "Trigger for slow updates")
   field(SCAN, "5 second")
   field(VAL, "$(EVSLOW)")
}

# Single-shot update
# We use a series of sequences rather than a single event because
# the latter seems to put too many requests on the queue and the
# processing times out for "later" PVs.
record(bo, "$(P):Update") {
   field(DESC, "Trigger for one-shot updates")
   field(ZNAM, "Update")
   field(ONAM, "Updating")
   field(FLNK, "$(P):Update:clc")
}
record(calcout, "$(P):Update:clc") {
   field(OOPT, "When Non-zero")
   field(DOPT, "Use OCAL")
   field(INPA, "$(P):Update")
   field(CALC, "A")
   field(OCAL, "1")
   field(OUT, "$(P):Update:0.PROC")
}

# Storage for fast and slow update periods because we will be
# setting them to Passive to disable their respective updates.
record(longout, "$(P):Update:fast:prev") {
   field(VAL, "6")
}
record(longout, "$(P):Update:slow:prev") {
   field(VAL, "4")
}

# Now the series of single-shot sequences.
# ":Update:0" sets it up, ":Update:L" cleans up
record(seq, "$(P):Update:0") {
   field(PINI, "1")
   field(DOL1, "$(P):Update:fast.SCAN")
   field(LNK1, "$(P):Update:fast:prev")
   field(DOL2, "$(P):Update:slow.SCAN")
   field(LNK2, "$(P):Update:slow:prev")
   field(DOL3, "0")
   field(LNK3, "$(P):Update:fast.SCAN")
   field(DOL4, "0")
   field(LNK4, "$(P):Update:slow.SCAN")
   field(LNKA, "$(P):Update:1.PROC PP")
}
record(seq, "$(P):Update:1") {
   field(LNK3, "$(P):Ctrl:Mode:rbk.PROC")
   field(LNK4, "$(P):SoftStart:rbk.PROC")
   field(LNK5, "$(P):SetPoint:Type:rbk.PROC")
   field(LNK6, "$(P):SetPoint:rbk.PROC")
   field(LNK7, "$(P):SetPoint:Pressure:rbk.PROC")
   field(LNK8, "$(P):SetPoint:Delay:rbk.PROC")
   field(LNKA, "$(P):Update:2.PROC")
   #field(DLY2, "0.1")
   #field(DLY3, "0.1")
   field(DLY4, "0.1")
   field(DLY5, "0.1")
   field(DLY6, "0.1")
   field(DLY7, "0.1")
   field(DLY8, "0.1")
   field(DLYA, "0.1")
}
record(seq, "$(P):Update:2") {
   field(LNK1, "$(P):SetPoint:Signal:rbk.PROC")
   field(LNK2, "$(P):SetPoint:Hyst:rbk.PROC")
   field(LNK3, "$(P):WaterCooled:rbk.PROC")
   field(LNK4, "$(P):ActiveStop:rbk.PROC")
   field(LNK5, "$(P):BaudRate:rbk.PROC")
   field(LNK6, "$(P):InterlockType:rbk.PROC")
   field(LNK7, "$(P):AnalogOutType:rbk.PROC")
   field(LNK8, "$(P):Freq:LowSpeed:rbk.PROC")
   field(LNKA, "$(P):Update:3.PROC")
   field(DLY2, "0.1")
   field(DLY3, "0.1")
   field(DLY4, "0.1")
   field(DLY5, "0.1")
   field(DLY6, "0.1")
   field(DLY7, "0.1")
   field(DLY8, "0.1")
   field(DLYA, "0.1")
}
record(seq, "$(P):Update:3") {
   field(LNK1, "$(P):Freq:rbk.PROC")
   field(LNK2, "$(P):Freq:max:rbk.PROC")
   field(LNK3, "$(P):VentValve:rbk.PROC")
   field(LNK4, "$(P):VentValve:Mode:rbk.PROC")
   field(LNK5, "$(P):VentValve:Delay:rbk.PROC")
   field(LNK6, "$(P):VentValve:Time:rbk.PROC")
   field(LNK7, "$(P):SetPointG:Type:rbk.PROC")
   field(LNK8, "$(P):SetPointG:rbk.PROC")
   field(LNKA, "$(P):Update:4.PROC")
   field(DLY2, "0.1")
   field(DLY3, "0.1")
   field(DLY4, "0.1")
   field(DLY5, "0.1")
   field(DLY6, "0.1")
   field(DLY7, "0.1")
   field(DLY8, "0.1")
   field(DLYA, "0.1")
}
record(seq, "$(P):Update:4") {
   field(LNK1, "$(P):SetPointG:Delay:rbk.PROC")
   field(LNK2, "$(P):SetPointG:Signal:rbk.PROC")
   field(LNK3, "$(P):SetPointG:Hyst:rbk.PROC")
   field(LNK4, "$(P):ExtFan:Config:rbk.PROC")
   field(LNK5, "$(P):ExtFan:rbk.PROC")
   field(LNK6, "$(P):Gas:LoadType:rbk.PROC")
   field(LNK7, "$(P):Gas:Type:rbk.PROC")
   field(LNK8, "$(P):Pressure:Corr:rbk.PROC")
   field(LNKA, "$(P):Update:5.PROC")
   field(DLY2, "0.1")
   field(DLY3, "0.1")
   field(DLY4, "0.1")
   field(DLY5, "0.1")
   field(DLY6, "0.1")
   field(DLY7, "0.1")
   field(DLY8, "0.1")
   field(DLYA, "0.1")
}
record(seq, "$(P):Update:5") {
   field(LNK1, "$(P):Pressure:Corr:Gauge:rbk.PROC")
   field(LNK2, "$(P):Pressure:Units:rbk.PROC")
   field(LNK3, "$(P):StopSpeedRead:rbk.PROC")
   field(LNK4, "$(P):SetPoint2:Type:rbk.PROC")
   field(LNK5, "$(P):SetPoint2:rbk.PROC")
   field(LNK6, "$(P):SetPoint2:Pressure:rbk.PROC")
   field(LNK7, "$(P):SetPoint2:Delay:rbk.PROC")
   field(LNK8, "$(P):SetPoint2:Signal:rbk.PROC")
   field(LNKA, "$(P):Update:6.PROC")
   field(DLY2, "0.1")
   field(DLY3, "0.1")
   field(DLY4, "0.1")
   field(DLY5, "0.1")
   field(DLY6, "0.1")
   field(DLY7, "0.1")
   field(DLY8, "0.1")
   field(DLYA, "0.1")
}
record(seq, "$(P):Update:6") {
   field(LNK1, "$(P):SetPoint2:Hyst:rbk.PROC")
   field(LNK2, "$(P):StartOutput:Mode:rbk.PROC")
   field(LNK3, "$(P):Gauge:Power:rbk.PROC")
   field(LNK4, "$(P):Serial:Address:rbk.PROC")
   field(LNK5, "$(P):Serial:Type:rbk.PROC")
   field(LNK6, "$(P):Power:Limit.PROC")
   field(LNK7, "$(P):CRC:EPROM.PROC")
   field(LNK8, "$(P):CRC:Boot.PROC")
   field(LNKA, "$(P):Update:7.PROC")
   field(DLY2, "0.1")
   field(DLY3, "0.1")
   field(DLY4, "0.1")
   field(DLY5, "0.1")
   field(DLY6, "0.1")
   field(DLY7, "0.1")
   field(DLY8, "0.1")
   field(DLYA, "0.1")
}
record(seq, "$(P):Update:7") {
   field(LNK1, "$(P):CRC:Param.PROC")
   field(LNK2, "$(P):CRC:Param:Struct.PROC")
   field(LNK3, "$(P):CRC:Prog:List:Code.PROC")
   field(LNK4, "$(P):CRC:Param:List:Code.PROC")
   field(LNK5, "$(P):Firmware.PROC")
   field(LNK6, "$(P):Serial:Address:rbk.PROC")
   field(LNKA, "$(P):Update:L.PROC")
   field(DLY2, "0.1")
   field(DLY3, "0.1")
   field(DLY4, "0.1")
   field(DLY5, "0.1")
   field(DLY6, "0.1")
   field(DLY7, "0.1")
   field(DLY8, "0.1")
   field(DLYA, "0.1")
}
record(seq, "$(P):Update:L") {
   field(DOL1, "$(P):Update:fast:prev")
   field(LNK1, "$(P):Update:fast.SCAN PP")
   field(DOL2, "$(P):Update:slow:prev")
   field(LNK2, "$(P):Update:slow.SCAN PP")
   field(DOLA, "0")
   field(LNKA, "$(P):Update PP")
}
