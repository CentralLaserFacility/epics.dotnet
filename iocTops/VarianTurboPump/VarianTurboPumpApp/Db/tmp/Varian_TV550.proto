ExtraInput = Ignore;
STX = \02;
ADDR = \x80;
ACK = \06;
ETX = \03;
ReplyTimeout = 500;

#
# These are protocols common to all models.
#

getStart {
  out "\${STX}\${ADDR}0000\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}000%d\${ETX}%01<xor8>";
}

setStart {
  out "\${STX}\${ADDR}0001%{0|1}\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
  @init { getStart;}
}

getBaudRate {
  out "\${STX}\${ADDR}1080\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}108%d\${ETX}%01<xor8>";
}

setBaudRate {
  out "\${STX}\${ADDR}1081%06d\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
  @init { getBaudRate;}
}

getCurrent {
  out "\${STX}\${ADDR}2000\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}200%f\${ETX}%01<xor8>";
}

getVoltage {
  out "\${STX}\${ADDR}2010\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}201%f\${ETX}%01<xor8>";
}

getErrorCode {
  out "\${STX}\${ADDR}2060\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}206%d\${ETX}%01<xor8>";
}

#
# This traps error responses
# Be sure to set SCAN field to "I/O Intr"
#
trapErrors {
  in  "\${STX}\${ADDR}%{\xff|\x15|\x32|\x33|\x34|\x35}\${ETX}%01<xor8>";
}
#
# These are protocols specific to the Agilent TwisTorr 304
#

getLowSpeed {
  out "\${STX}\${ADDR}0010\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}001%d\${ETX}%01<xor8>";
}

setLowSpeed {
  out "\${STX}\${ADDR}0011%{0|1}\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
  @init { getLowSpeed;}
}

getCtrlMode {
  out "\${STX}\${ADDR}1070\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}107%d\${ETX}%01<xor8>";
}

setCtrlMode {
  out "\${STX}\${ADDR}1071%{0|1}\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
  @init { getCtrlMode;}
}

getSoftStart {
  out "\${STX}\${ADDR}1000\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}100%d\${ETX}%01<xor8>";
}

setSoftStart {
  out "\${STX}\${ADDR}1001%{0|1}\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
  @init { getSoftStart;}
}

getSP1Type {
  # code 101 not supported
  wait 0;
}

setSP1Type {
  # code 101 not supported
  wait 0;
}

getSetPoint {
  out "\${STX}\${ADDR}1030\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}103%d\${ETX}%01<xor8>";
}

setSetPoint {
  out "\${STX}\${ADDR}1031%06d\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
  @init { getSetPoint;}
}

getSP1Delay {
  out "\${STX}\${ADDR}1040\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}104%d\${ETX}%01<xor8>";
}

setSP1Delay {
  out "\${STX}\${ADDR}1041%06d\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
  @init { getSP1Delay;}
}

getSP1Signal {
  # Set point signal activation type not supported
}

setSP1Signal {
  # Set point signal activation type not supported
}

getSP1Hyst {
  # code 105 not supported
  wait 0;
}

setSP1Hyst {
  # code 105 not supported
  wait 0;
}

getWaterCooled {
  out "\${STX}\${ADDR}1020\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}102%d\${ETX}%01<xor8>";
}

setWaterCooled {
  out "\${STX}\${ADDR}1021%{0|1}\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
  @init { getWaterCooled;}
}

getActiveStop {
  # code 107 is not supported
  wait 0;
}

setActiveStop {
  # code 107 is not supported
  wait 0;
}

setResetCounters {
  out "\${STX}\${ADDR}1091%{0|1}\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
}

getInterlockType {
  # code 110 not supported
  wait 0;
}

setInterlockType {
  # code 110 not supported
  wait 0;
}

getAnalogOutType {
  # code 111 not supported
  wait 0;
}

setAnalogOutType {
  # code 111 not supported
  wait 0;
}

getLowSpeedFreq {
  # code 117 is not supported
  wait 0;
}

setLowSpeedFreq {
  # code 117 is not supported
  wait 0;
}

getRotFreq {
  out "\${STX}\${ADDR}1060\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}106%d\${ETX}%01<xor8>";
}

setRotFreq {
  out "\${STX}\${ADDR}1061%06d\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}\${ACK}\${ETX}%01<xor8>";
  @init { getRotFreq;}
}

getMaxRotFreq {
  # code 121 not supported
  wait 0;
}

setMaxRotFreq {
  # code 121 not supported
  wait 0;
}

getVentValve {
  # code 122 not supported
  wait 0;
}

setVentValve {
  # code 122 not supported
  wait 0;
}

getVentValveMode {
  # code 125 not supported
  wait 0;
}

setVentValveMode {
  # code 125 not supported
  wait 0;
}

getVentValveDelay {
  # code 126 not supported
  wait 0;
}

setVentValveDelay {
  # code 126 not supported
  wait 0;
}

getGaugeSPType {
  # code 136 not supported
  wait 0;
}

setGaugeSPType {
  # code 136 not supported
  wait 0;
}

getGaugeSP {
  # code 137 not supported
  wait 0;
}

setGaugeSP {
  # code 137 not supported
  wait 0;
}

getGaugeSPDelay {
  # code 138 not supported
  wait 0;
}

setGaugeSPDelay {
  # code 138 not supported
  wait 0;
}

getGaugeSPSignal {
  # code 139 not supported
  wait 0;
}

setGaugeSPSignal {
  # code 139 not supported
  wait 0;
}

getGaugeSPHyst {
  # code 140 not supported
  wait 0;
}

setGaugeSPHyst {
  # code 140 not supported
  wait 0;
}

getExtFanConfig {
  # code 143 not supported
  wait 0;
}

setExtFanConfig {
  # code 143 not supported
  wait 0;
}

getExtFan {
  # code 144 not supported
  wait 0;
}

setExtFan {
  # code 144 not supported
  wait 0;
}

getVentOpenTime {
  # code 147 not supported
  wait 0;
}

setVentOpenTime {
  # code 147 not supported
  wait 0;
}

getPowerLimit {
  # code 155 not supported
  wait 0;
}

getLoadtype {
  # code 157 not supported
  wait 0;
}

setLoadtype {
  # code 157 not supported
  wait 0;
}

getGaugePCorr {
  # code 161 not supported
  wait 0;
}

setGaugePCorr {
  # code 161 not supported
  wait 0;
}

getSP1Press {
  # code 162 not supported
  wait 0;
}

setSP1Press {
  # code 162 not supported
  wait 0;
}

getPressUnits {
  # code 163 not supported
  wait 0;
}

setPressUnits {
  # code 163 not supported
  wait 0;
}

getStopSpeedRead {
  # code 167 supported
  wait 0;
}

setStopSpeedRead {
  # code 167 supported
  wait 0;
}

getSP2Type {
  # code 171 not supported
  wait 0;
}

setSP2Type {
  # code 171 not supported
  wait 0;
}

getSetPoint2 {
  # code 172 not supported
  wait 0;
}

setSetPoint2 {
  # code 172 not supported
  wait 0;
}

getSP2Delay {
  # code 173 not supported
  wait 0;
}

setSP2Delay {
  # code 173 not supported
  wait 0;
}

getSP2Signal {
  # code 174 not supported
  wait 0;
}

setSP2Signal {
  # code 174 not supported
  wait 0;
}

getSP2Hyst {
  # code 175 not supported
  wait 0;
}

setSP2Hyst {
  # code 175 not supported
  wait 0;
}

getSP2Press {
  # code 176 not supported
  wait 0;
}

setSP2Press {
  # code 176 not supported
  wait 0;
}

getStartOutMode {
  # code 177 not supported
  wait 0;
}

setStartOutMode {
  # code 177 not supported
  wait 0;
}

getGasType {
  # code 181 not supported
  wait 0;
}

setGasType {
  # code 181 not supported
  wait 0;
}

getOtherGCorr {
  # code 182 not supported
  wait 0;
}

setOtherGCorr {
  # code 182 not supported
  wait 0;
}

getPower {
  out "\${STX}\${ADDR}2020\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}202%f\${ETX}%01<xor8>";
}

getDrivingFreq {
  out "\${STX}\${ADDR}2030\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}203%f\${ETX}%01<xor8>";
}

getTemperature {
  out "\${STX}\${ADDR}2040\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}204%f\${ETX}%01<xor8>";
}

getStatus {
  out "\${STX}\${ADDR}2050\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}205%d\${ETX}%01<xor8>";
}

getSP1State {
  out "\${STX}\${ADDR}2070\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}207%d\${ETX}%01<xor8>";
}

getSP2State {
  out "\${STX}\${ADDR}2080\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}208%d\${ETX}%01<xor8>";
}

getHeatSinkTemp {
  # code 211 not supported
  wait 0;
}

getAirTemp {
  # code 216 not supported
  wait 0;
}

getSP1StateA {
  # code 221 not supported
  wait 0;
}

getPressure{
  # code 224 not supported
  wait 0;
}

getSP2StateA {
  # code 225 not supported
  wait 0;
}

getFreq {
  # code 226 not supported
  wait 0;
}

getGaugeStatus {
  # code 257 not supported
  wait 0;
}

getGaugePower {
  # code 267 not supported
  wait 0;
}

setGaugePower {
  # code 267 not supported
  wait 0;
}

getCycleTime {
  out "\${STX}\${ADDR}3000\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}300%d\${ETX}%01<xor8>";
}

getCycleNumber {
  out "\${STX}\${ADDR}3010\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}301%d\${ETX}%01<xor8>";
}

getLife {
  out "\${STX}\${ADDR}3020\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}302%d\${ETX}%01<xor8>";
}

getTipSealLife {
  # code 358 not supported
  wait 0;
}

# there is white space between the data and ETX and the
# protocol parser does not ignore it
getCRCEPROM {
  out "\${STX}\${ADDR}4000\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}400%s%*[ ]\${ETX}%01<xor8>";
}

getBootCRC {
  # code 401 not supported
  wait 0;
}

# there is white space between the data and ETX and the
# protocol parser does not ignore it
getCRCPar {
  out "\${STX}\${ADDR}4020\${ETX}%01<xor8>";
  in  "\${STX}\${ADDR}402%s%*[ ]\${ETX}%01<xor8>";
}

getCRCParStruct {
  # code 404 not supported
  wait 0;
}

getProgListCode {
  # code 406 not supported
  wait 0;
}

getParListCode {
  # code 407 not supported
  wait 0;
}

getFirmwareRev {
  # code 408 not supported
  wait 0;
}

getSerialAddr {
  # code 503 not supported
  wait 0;
}

setSerialAddr {
  # code 503 not supported
  wait 0;
}

getSerialType {
  # code 504 not supported
  wait 0;
}

setSerialType {
  # code 504 not supported
  wait 0;
}
